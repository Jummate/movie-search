{"version":3,"sources":["Header.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","w","h","bg","align","justify","px","color","border","py","rounded","fontFamily","fontWeight","bgGradient","fontSize","textAlign","lineHeight","Main","onChange","detail","p","pb","as","size","placeholder","borderColor","_placeholder","letterSpacing","overflowY","App","useState","query","setQuery","result","setResult","moviedetail","setMovieDetail","event","target","value","url","axios","get","then","response","data","Search","movie","episode","series","movieList","filter","content","Type","episodeList","seriesList","map","backgroundImage","Poster","Title","mb","minW","columns","spacing","catch","error","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.472145fd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport {Text,Flex,Center} from '@chakra-ui/react';\r\n\r\nconst Header = () => (\r\n    <>\r\n        <Flex w='100%' h='60px' bg='blackAlpha.800' align='center' justify={['center','center','left']} px='30px'color='white'>\r\n            <Center border='1px solid white'px='10px'py='2px'rounded='sm'fontFamily='Times New Roman'>MyTestApp</Center>\r\n        </Flex>\r\n        <Flex \r\n            w='100%'\r\n            h='300px'\r\n            bg='red.400'\r\n            color='white'\r\n            fontWeight='semibold'\r\n            align='center'\r\n            justify={['center','center','left']}\r\n            fontFamily='Calibri' px='30px'\r\n            bgGradient='radial(red,black)'\r\n            >\r\n\r\n            <Text w='300px' py='2px'rounded='sm' fontSize={['25px','40px','55px']} textAlign={['center','center','left']} lineHeight={['30px','40px','55px']}>Watch something incredible.</Text>\r\n        </Flex>\r\n        \r\n    </>\r\n)\r\nexport default Header;","import React from 'react';\r\n\r\nimport {Input,Text,Box, VStack} from '@chakra-ui/react';\r\n\r\nconst Main = ({onChange,detail}) => (\r\n    <Box w='100%' p='20px'>\r\n        <Box pb='30px'>\r\n            <Text as='label'>Search:</Text>\r\n            <Input \r\n                size='sm'\r\n                placeholder=''\r\n                borderColor='black'\r\n                color='black'\r\n                _placeholder={{color:'gray.700'}}\r\n                letterSpacing='1.2px'\r\n                onChange={onChange}\r\n            />\r\n        </Box>\r\n        <VStack  overflowY='auto'>\r\n            {detail}\r\n        </VStack>\r\n    </Box>\r\n)\r\n\r\nexport default Main;","\nimport React,{useState} from 'react';\nimport {Box, Heading,Square, SimpleGrid} from '@chakra-ui/react';\nimport axios from 'axios';\n\nimport Header from './Header';\nimport Main from './Main';\n\n\nfunction App() {\n    const[query, setQuery] = useState('');\n    const[result,setResult] = useState('');\n    const[moviedetail, setMovieDetail] = useState('');\n    \n    const searchMovie = (movie,episode,series) => {\n      movie = movie.map((content) => \n        < Square size={['150px','200px']} backgroundImage={`url(${content.Poster})`} color='white'>\n             \n                 {content.Title}\n               </Square>\n      )\n      episode = episode.map((content) => {\n        return <Square  size={['150px','200px']} backgroundImage={`url(${content.Poster})`} color='white'>\n                 \n                 {content.Title}\n               </Square>\n      })\n      series = series.map((content) => {\n        return <Square  size={['150px','200px']} backgroundImage={`url(${content.Poster})`} color='white'>\n                 \n                 {content.Title}\n               </Square>\n      })\n      return <Box w='100%'>\n                <Box mb={['20px','25px','30px']} minW='100%'>\n                  <Heading as='h5'>Movie</Heading>\n                  <SimpleGrid  columns={[2,null,3,5]} spacing='10px'>{movie}</SimpleGrid>\n                </Box>\n                <Box mb={['20px','25px','30px']} minW='100%'>\n                  <Heading as='h5'>Episode</Heading>\n                  <SimpleGrid  columns={[2,3,4,5]} spacing='10px'>{episode}</SimpleGrid>\n                </Box>\n                <Box mb={['20px','25px','30px']} minW='100%'>\n                  <Heading as='h5'>Series</Heading>\n                  <SimpleGrid  columns={[2,3,4,5]} spacing='10px'>{series}</SimpleGrid>\n                </Box>\n          </Box>\n    }\n    const handleChange = (event) => {\n        setQuery(event.target.value);\n    \n        const url = 'https://www.omdbapi.com/?s='+query+'&apikey=27472284';\n        axios\n            .get(url)\n            .then((response) => {\n              let data = response.data.Search;\n              setResult(data);\n              let movieList = result.filter((content) => content.Type==='movie');\n              let episodeList = result.filter((content) => content.Type==='episode');\n              let seriesList = result.filter((content) => content.Type==='series');\n              let detail = searchMovie(movieList, episodeList,seriesList);\n              setMovieDetail(detail);\n              \n            })\n            .catch((error) => {\n              console.log(error)\n            })\n\n        \n    }\n\n    \n  return (\n\n    <Box h='100vh' bg='white'>\n       \n          <Header />\n          <Main onChange={handleChange} detail={moviedetail}/>\n        \n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ChakraProvider} from '@chakra-ui/react';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}